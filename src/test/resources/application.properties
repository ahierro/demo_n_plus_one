spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
spring.datasource.url=jdbc:hsqldb:file:./testdb
spring.h2.console.settings.web-allow-others=true

spring.jpa.properties.hibernate.format_sql=true

#A non-zero value determines the JDBC fetch size (calls Statement.setFetchSize()).
spring.jpa.properties.hibernate.jdbc.fetch_size=4

#A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30
spring.jpa.properties.hibernate.jdbc.batch_size=4

#If enabled, Hibernate will collect statistics useful for performance tuning. e.g. true | false
spring.jpa.properties.hibernate.generate_statistics=true

#Forces Hibernate to order inserts to allow for more batching to be used. Comes with a performance hit, so benchmark before and after to see if this actually helps or hurts your application.
spring.jpa.properties.hibernate.order_inserts=true

#Forces Hibernate to order SQL updates by the primary key value of the items being updated. This will result in fewer transaction deadlocks in highly concurrent systems. e.g. true | false
spring.jpa.properties.hibernate.order_updates=true

#Set this property to true if your JDBC driver returns correct row counts from executeBatch(). It is usually safe to turn this option on. Hibernate will then use batched DML for automatically versioned data. Defaults to false.
#spring.jpa.properties.hibernate.batch_versioned_data=true

logging.level.org.hibernate.type.descriptor.sql=TRACE
